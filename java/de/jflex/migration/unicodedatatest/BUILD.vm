# Copyright 2021, Google LLC
#
# SPDX-License-Identifier: BSD-2-Clause

# This file was generated by BuildFileGenerator.java
# from java/de/jflex/migration/unicodedatatest/BUILD.vm
#set( $H = '#' )

load("@jflex_rules//jflex:jflex.bzl", "jflex")
load("//scripts:check_deps.bzl", "check_deps")

check_deps(
    name = "deps_to_bootstrap_jflex_test",
    prohibited = "@jflex_rules//jflex:jflex_bin",
)

#if (${unicodeVersion} != "1.1")
# Test Age property

java_test(
    name = "UnicodeAgeTest_${unicodeVersion.underscoreVersion()}",
    size = "small",
    srcs = [
        # TODO(regisd) Replace by generator directly
        # "//java/de/jflex/migration/unicodedatatest/testage:javatests/de/jflex/testcase/unicode/unicode_${unicodeVersion.underscoreVersion()}/UnicodeAgeTest_${unicodeVersion.underscoreVersion()}.java",
        "UnicodeAgeTest_${unicodeVersion.underscoreVersion()}.java",
        #foreach ( $a in $ages )
        ":gen_UnicodeAge_${unicodeVersion.underscoreVersion()}_age_${a.underscoreVersion()}_scanner",
        #end
        ":gen_UnicodeAge_${unicodeVersion.underscoreVersion()}_age_subtraction_scanner",
        ":gen_UnicodeAge_${unicodeVersion.underscoreVersion()}_age_unassigned_scanner",
    ],
    data = [
        #foreach ( $a in $ages )
        "UnicodeAge_${unicodeVersion.underscoreVersion()}_age_${a.underscoreVersion()}.output",
        #end
        "UnicodeAge_${unicodeVersion.underscoreVersion()}_age_subtraction.output",
        "UnicodeAge_${unicodeVersion.underscoreVersion()}_age_unassigned.output",
        # TODO(regisd) UnicodeAge_3_0 uses BMP but could use ALL
        "//testsuite/testcases/src/test/resources:All.Unicode.characters.input",
        "//testsuite/testcases/src/test/resources:All.Unicode.BMP.characters.input",
    ],
    deps = [
        "//java/de/jflex/util/javac:package_util",
        "//java/de/jflex/testing/unicodedata",
        "//java/de/jflex/util/scanner:scanner_factory",
        "//jflex/src/main/java/jflex/core/unicode",
        "//third_party/com/google/truth",
        "//third_party/javax:annotation",
    ],
)

#foreach ( $a in $ages )
jflex(
    name = "gen_UnicodeAge_${unicodeVersion.underscoreVersion()}_age_${a.underscoreVersion()}_scanner",
    srcs = ["//java/de/jflex/migration/unicodedatatest/testage:javatests/de/jflex/testcase/unicode/unicode_${unicodeVersion.underscoreVersion()}/UnicodeAge_${unicodeVersion.underscoreVersion()}_age_${a.underscoreVersion()}.flex"],
    jflex_bin = "//jflex:jflex_bin",
    outputs = ["UnicodeAge_${unicodeVersion.underscoreVersion()}_age_${a.underscoreVersion()}.java"],
)

#end

jflex(
    name = "gen_UnicodeAge_${unicodeVersion.underscoreVersion()}_age_subtraction_scanner",
    srcs = ["//java/de/jflex/migration/unicodedatatest/testage:javatests/de/jflex/testcase/unicode/unicode_${unicodeVersion.underscoreVersion()}/UnicodeAge_${unicodeVersion.underscoreVersion()}_age_subtraction.flex"],
    jflex_bin = "//jflex:jflex_bin",
    outputs = ["UnicodeAge_${unicodeVersion.underscoreVersion()}_age_subtraction.java"],
)

jflex(
    name = "gen_UnicodeAge_${unicodeVersion.underscoreVersion()}_age_unassigned_scanner",
    srcs = ["//java/de/jflex/migration/unicodedatatest/testage:javatests/de/jflex/testcase/unicode/unicode_${unicodeVersion.underscoreVersion()}/UnicodeAge_${unicodeVersion.underscoreVersion()}_age_unassigned.flex"],
    jflex_bin = "//jflex:jflex_bin",
    outputs = ["UnicodeAge_${unicodeVersion.underscoreVersion()}_age_unassigned.java"],
)

# Test Block property
java_test(
    name = "UnicodeBlocksTest_${unicodeVersion.underscoreVersion()}",
    size = "small",
    srcs = [
        ":gen_UnicodeBlocks_${unicodeVersion.underscoreVersion()}_scanner",
        # TODO(regisd) Replace by generator directly
        # "//java/de/jflex/migration/unicodedatatest/testblock:javatests/de/jflex/testcase/unicode/unicode_${unicodeVersion.underscoreVersion()}/UnicodeBlocksTest_${unicodeVersion.underscoreVersion()}.java",
        "UnicodeBlocksTest_${unicodeVersion.underscoreVersion()}.java",
    ],
    data = [
        "//java/de/jflex/testcase/resources:${dataset.dataFile()}",
    ],
    deps = [
        "//java/de/jflex/testing/unicodedata",
        "//java/de/jflex/ucd",
        "//java/de/jflex/util/scanner:scanner_factory",
        "//third_party/com/google/truth",
        "//third_party/javax:annotation",
    ],
)

jflex(
    name = "gen_UnicodeBlocks_${unicodeVersion.underscoreVersion()}_scanner",
    # generated by //java/de/jflex/migration/unicodedatatest/testblock:gen_test_blocks_${unicodeVersion.underscoreVersion()}
    srcs = ["//java/de/jflex/migration/unicodedatatest/testblock:javatests/de/jflex/testcase/unicode/unicode_${unicodeVersion.underscoreVersion()}/UnicodeBlocks_${unicodeVersion.underscoreVersion()}.flex"],
    jflex_bin = "//jflex:jflex_bin",
    outputs = ["UnicodeBlocks_${unicodeVersion.underscoreVersion()}.java"],
)
#end

# Test caseless directive
java_test(
    name = "UnicodeCaselessTest_${unicodeVersion.underscoreVersion()}",
    size = "small",
    srcs = [
        ":gen_UnicodeCaseless_${unicodeVersion.underscoreVersion()}_scanner",
        # TODO(regisd) Replace by generator directly
        # "//java/de/jflex/migration/unicodedatatest/testcaseless:javatests/de/jflex/testcase/unicode/unicode_${unicodeVersion.underscoreVersion()}/UnicodeCaselessTest_${unicodeVersion.underscoreVersion()}.java",
        "UnicodeCaselessTest_${unicodeVersion.underscoreVersion()}.java",
    ],
    data = [
        "UnicodeCaseless_${unicodeVersion.underscoreVersion()}.output",
        "//java/de/jflex/testcase/resources:${dataset.dataFile()}",
    ],
    deps = [
        "//java/de/jflex/testing/unicodedata",
        "//java/de/jflex/util/scanner:scanner_factory",
        "//third_party/com/google/truth",
        "//third_party/javax:annotation",
    ],
)

jflex(
    name = "gen_UnicodeCaseless_${unicodeVersion.underscoreVersion()}_scanner",
    # generated by //java/de/jflex/migration/unicodedatatest/testcaseless:gen_test_caseless_${unicodeVersion.underscoreVersion()}
    srcs = ["//java/de/jflex/migration/unicodedatatest/testcaseless:javatests/de/jflex/testcase/unicode/unicode_${unicodeVersion.underscoreVersion()}/UnicodeCaseless_${unicodeVersion.underscoreVersion()}.flex"],
    jflex_bin = "//jflex:jflex_bin",
    outputs = ["UnicodeCaseless_${unicodeVersion.underscoreVersion()}.java"],
)

# Test compatibility properties
java_test(
    name = "UnicodeCompatibilityPropertiesTest_${unicodeVersion.underscoreVersion()}",
    size = "small",
    srcs = [
        "UnicodeCompatibilityPropertiesTest_${unicodeVersion.underscoreVersion()}.java",
        #foreach ( $propName in $compatibilityProperties )
        ":gen_UnicodeCompatibilityProperties_${propName}_${unicodeVersion.underscoreVersion()}_scanner",
        #end
    ],
    data = [
        #foreach ( $propName in $compatibilityProperties )
        "UnicodeCompatibilityProperties_${propName}_${unicodeVersion.underscoreVersion()}.output",
        #end
        "//java/de/jflex/testcase/resources:${dataset.dataFile()}",
    ],
    deps = [
        "//java/de/jflex/testing/unicodedata",
        "//java/de/jflex/ucd",
        "//java/de/jflex/util/javac:package_util",
        "//java/de/jflex/util/scanner:scanner_factory",
        "//third_party/com/google/truth",
        "//third_party/javax:annotation",
    ],
)

#foreach ( $propName in $compatibilityProperties )
jflex(
    name = "gen_UnicodeCompatibilityProperties_${propName}_${unicodeVersion.underscoreVersion()}_scanner",
    # generated by //java/de/jflex/migration/unicodedatatest/testcompat:gen_test_compat_${unicodeVersion.underscoreVersion()}
    srcs = ["//java/de/jflex/migration/unicodedatatest/testcompat:javatests/de/jflex/testcase/unicode/unicode_${unicodeVersion.underscoreVersion()}/UnicodeCompatibilityProperties_${propName}_${unicodeVersion.underscoreVersion()}.flex"],
    jflex_bin = "//jflex:jflex_bin",
    outputs = ["UnicodeCompatibilityProperties_${propName}_${unicodeVersion.underscoreVersion()}.java"],
)
#end

#if (${unicodeVersion.major} > 3
     || ${unicodeVersion.major} == 3 && ${unicodeVersion.minor} > 0)
# Test derived properties

java_test(
    name = "UnicodeDerivedCorePropertiesTest_${unicodeVersion.underscoreVersion()}",
    size = "small",
    srcs = [
        "UnicodeDerivedCorePropertiesTest_${unicodeVersion.underscoreVersion()}.java",
        #foreach ( $propName in $derivedCoreProperties )
        ":gen_UnicodeDerivedCoreProperties_${propName}_${unicodeVersion.underscoreVersion()}_scanner",
        #end
    ],
    data = [
        #foreach ( $propName in $derivedCoreProperties )
        "UnicodeDerivedCoreProperties_${propName}_${unicodeVersion.underscoreVersion()}.output",
        #end
        "//java/de/jflex/testcase/resources:${dataset.dataFile()}",
    ],
    deps = [
        "//java/de/jflex/testing/unicodedata",
        "//java/de/jflex/ucd",
        "//java/de/jflex/util/javac:package_util",
        "//java/de/jflex/util/scanner:scanner_factory",
        "//third_party/com/google/truth",
        "//third_party/javax:annotation",
    ],
)

#foreach ( $propName in $derivedCoreProperties )
jflex(
    name = "gen_UnicodeDerivedCoreProperties_${propName}_${unicodeVersion.underscoreVersion()}_scanner",
    srcs = ["//java/de/jflex/migration/unicodedatatest/testderivedcoreprop:javatests/de/jflex/testcase/unicode/unicode_${unicodeVersion.underscoreVersion()}/UnicodeDerivedCoreProperties_${propName}_${unicodeVersion.underscoreVersion()}.flex"],
    jflex_bin = "//jflex:jflex_bin",
    outputs = ["UnicodeDerivedCoreProperties_${propName}_${unicodeVersion.underscoreVersion()}.java"],
)
#end
#end


# Test digit
java_test(
    name = "UnicodeDigitTest_${unicodeVersion.underscoreVersion()}",
    size = "small",
    srcs = [
        ":gen_UnicodeDigit_digit_${unicodeVersion.underscoreVersion()}_scanner",
        ":gen_UnicodeDigit_lowerD_${unicodeVersion.underscoreVersion()}_scanner",
        ":gen_UnicodeDigit_upperD_${unicodeVersion.underscoreVersion()}_scanner",
        # TODO(regisd) Replace by generator directly
        # "//java/de/jflex/migration/unicodedatatest/testdigit:javatests/de/jflex/testcase/unicode/unicode_${unicodeVersion.underscoreVersion()}/UnicodeDigitTest_${unicodeVersion.underscoreVersion()}.java",
        "UnicodeDigitTest_${unicodeVersion.underscoreVersion()}.java",
    ],
    data = [
        "UnicodeDigit_${unicodeVersion.underscoreVersion()}.output",
        "//java/de/jflex/testcase/resources:${dataset.dataFile()}",
    ],
    deps = [
        "//java/de/jflex/testing/unicodedata",
        "//java/de/jflex/ucd",
        "//java/de/jflex/util/scanner:scanner_factory",
        "//third_party/com/google/truth",
        "//third_party/javax:annotation",
    ],
)

jflex(
    name = "gen_UnicodeDigit_digit_${unicodeVersion.underscoreVersion()}_scanner",
    # generated by //java/de/jflex/migration/unicodedatatest/testdigit:gen_test_digit_${unicodeVersion.underscoreVersion()}
    srcs = ["//java/de/jflex/migration/unicodedatatest/testdigit:javatests/de/jflex/testcase/unicode/unicode_${unicodeVersion.underscoreVersion()}/UnicodeDigit_digit_${unicodeVersion.underscoreVersion()}.flex"],
    jflex_bin = "//jflex:jflex_bin",
    outputs = ["UnicodeDigit_digit_${unicodeVersion.underscoreVersion()}.java"],
)

jflex(
    name = "gen_UnicodeDigit_lowerD_${unicodeVersion.underscoreVersion()}_scanner",
    # generated by //java/de/jflex/migration/unicodedatatest/testdigit:gen_test_digit_${unicodeVersion.underscoreVersion()}
    srcs = ["//java/de/jflex/migration/unicodedatatest/testdigit:javatests/de/jflex/testcase/unicode/unicode_${unicodeVersion.underscoreVersion()}/UnicodeDigit_lowerD_${unicodeVersion.underscoreVersion()}.flex"],
    jflex_bin = "//jflex:jflex_bin",
    outputs = ["UnicodeDigit_lowerD_${unicodeVersion.underscoreVersion()}.java"],
)

jflex(
    name = "gen_UnicodeDigit_upperD_${unicodeVersion.underscoreVersion()}_scanner",
    # generated by //java/de/jflex/migration/unicodedatatest/testdigit:gen_test_digit_${unicodeVersion.underscoreVersion()}
    srcs = ["//java/de/jflex/migration/unicodedatatest/testdigit:javatests/de/jflex/testcase/unicode/unicode_${unicodeVersion.underscoreVersion()}/UnicodeDigit_upperD_${unicodeVersion.underscoreVersion()}.flex"],
    jflex_bin = "//jflex:jflex_bin",
    outputs = ["UnicodeDigit_upperD_${unicodeVersion.underscoreVersion()}.java"],
)

#if (${unicodeVersion.major} >= 8)
# Test emoji

java_test(
    name = "UnicodeEmojiTest_${unicodeVersion.underscoreVersion()}",
    size = "small",
    srcs = [
       "UnicodeEmojiTest_${unicodeVersion.underscoreVersion()}.java",
       #foreach ( $propName in $emojiProperties )
       ":gen_UnicodeEmoji_${propName}_${unicodeVersion.underscoreVersion()}_scanner",
       #end
    ],
    data = [
        #foreach ( $propName in $emojiProperties )
        "UnicodeEmoji_${propName}_${unicodeVersion.underscoreVersion()}.output",
        #end
        "//java/de/jflex/testcase/resources:All.Unicode.characters.input",
    ],
    deps = [
        "//java/de/jflex/testing/unicodedata",
        "//java/de/jflex/ucd",
        "//java/de/jflex/util/scanner:scanner_factory",
        "//third_party/com/google/truth",
        "//third_party/javax:annotation",
    ],
)

#foreach ( $propName in $emojiProperties )
jflex(
    name = "gen_UnicodeEmoji_${propName}_${unicodeVersion.underscoreVersion()}_scanner",
    # generated by //java/de/jflex/migration/unicodedatatest/testemoji:gen_test_emoji_${unicodeVersion.underscoreVersion()}
    srcs = ["//java/de/jflex/migration/unicodedatatest/testemoji:javatests/de/jflex/testcase/unicode/unicode_${unicodeVersion.underscoreVersion()}/UnicodeEmoji_${propName}_${unicodeVersion.underscoreVersion()}.flex"],
    jflex_bin = "//jflex:jflex_bin",
    outputs = ["UnicodeEmoji_${propName}_${unicodeVersion.underscoreVersion()}.java"],
)
#end
#end
