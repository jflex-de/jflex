/* The following code was generated by JFlex 1.4_6 on 4/12/04 1:06 PM */

/* this is the scanner example from the JLex website 
   (with small modifications to make it more readable) */


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4_6
 * on 4/12/04 1:06 PM from the specification file
 * <tt>testcases/simple/simple.flex</tt>
 */
public class Yylex {

  /** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String zzNL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 1;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  3,  3,  5,  0,  0,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3,  0,  7,  0,  0,  0, 26,  0, 14, 15,  9, 21, 11, 22, 20,  8, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 12, 13, 24, 23, 25,  0, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 16,  6, 17,  0, 10, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 18, 27, 19,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\3\1\2\2\1\5\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\2\0\1\1\1\37\1\40\1\1"+
    "\1\5\1\0\1\31";

  private static int [] zzUnpackAction() {
    int [] result = new int[48];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\34\0\70\0\124\0\160\0\214\0\250\0\304"+
    "\0\340\0\70\0\70\0\374\0\70\0\70\0\70\0\70"+
    "\0\70\0\70\0\70\0\70\0\70\0\70\0\70\0\u0118"+
    "\0\u0134\0\70\0\70\0\u0150\0\u016c\0\70\0\u0188\0\u01a4"+
    "\0\u01c0\0\70\0\70\0\70\0\70\0\70\0\70\0\u01dc"+
    "\0\u01f8\0\u0214\0\70\0\70\0\u0230\0\u024c\0\u0268\0\304";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[48];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\6\1\3\1\10"+
    "\1\11\1\12\1\3\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\4\34\1\35\1\36\2\34"+
    "\1\37\1\40\22\34\35\0\2\4\7\0\1\4\23\0"+
    "\1\5\34\0\1\6\1\0\1\6\33\0\1\36\26\0"+
    "\4\10\2\0\1\41\1\42\24\10\11\0\1\43\51\0"+
    "\1\44\33\0\1\45\1\0\1\46\31\0\1\47\4\0"+
    "\5\34\1\0\2\34\1\50\1\51\27\34\1\36\2\34"+
    "\1\50\1\51\27\34\1\0\2\34\1\52\1\53\27\34"+
    "\1\0\2\34\1\54\1\55\22\34\3\10\1\56\2\57"+
    "\1\41\1\60\24\10\5\34\1\0\2\34\1\52\1\0"+
    "\27\34\1\0\2\34\1\0\1\55\27\34\1\0\2\34"+
    "\1\52\1\51\27\34\1\0\2\34\1\50\1\55\22\34"+
    "\3\10\1\56\2\57\1\41\1\42\24\10\3\0\3\57"+
    "\1\10\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[644];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\1\11\6\1\2\11\1\1\13\11\2\1"+
    "\2\11\2\1\1\11\3\1\6\11\2\0\1\1\2\11"+
    "\2\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[48];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  private int comment_count = 0;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  private final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  private final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  private final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [32] { return (new Yytoken(1,yytext(),yyline,yychar,yychar+1)); }");
          { return (new Yytoken(1,yytext(),yyline,yychar,yychar+1));
          }
        case 33: break;
        case 12: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [35] { return (new Yytoken(4,yytext(),yyline,yychar,yychar+1)); }");
          { return (new Yytoken(4,yytext(),yyline,yychar,yychar+1));
          }
        case 34: break;
        case 23: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [51] { return (new Yytoken(20,yytext(),yyline,yychar,yychar+1)); }");
          { return (new Yytoken(20,yytext(),yyline,yychar,yychar+1));
          }
        case 35: break;
        case 15: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [38] { return (new Yytoken(7,yytext(),yyline,yychar,yychar+1)); }");
          { return (new Yytoken(7,yytext(),yyline,yychar,yychar+1));
          }
        case 36: break;
        case 3: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [72] { return (new Yytoken(43,yytext(),yyline,yychar,yychar+yylength())); }");
          { return (new Yytoken(43,yytext(),yyline,yychar,yychar+yylength()));
          }
        case 37: break;
        case 22: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [49] { return (new Yytoken(18,yytext(),yyline,yychar,yychar+1)); }");
          { return (new Yytoken(18,yytext(),yyline,yychar,yychar+1));
          }
        case 38: break;
        case 19: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [42] { return (new Yytoken(11,yytext(),yyline,yychar,yychar+1)); }");
          { return (new Yytoken(11,yytext(),yyline,yychar,yychar+1));
          }
        case 39: break;
        case 5: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [64] { String str =  yytext().substring(1,yytext().length());"+zzNL+"    Utility.error(Utility.E_UNCLOSEDSTR);"+zzNL+"    return (new Yytoken(41,str,yyline,yychar,yychar + str.length())); }");
          { String str =  yytext().substring(1,yytext().length());
    Utility.error(Utility.E_UNCLOSEDSTR);
    return (new Yytoken(41,str,yyline,yychar,yychar + str.length()));
          }
        case 40: break;
        case 20: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [45] { return (new Yytoken(14,yytext(),yyline,yychar,yychar+1)); }");
          { return (new Yytoken(14,yytext(),yyline,yychar,yychar+1));
          }
        case 41: break;
        case 17: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [40] { return (new Yytoken(9,yytext(),yyline,yychar,yychar+1)); }");
          { return (new Yytoken(9,yytext(),yyline,yychar,yychar+1));
          }
        case 42: break;
        case 10: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [33] { return (new Yytoken(2,yytext(),yyline,yychar,yychar+1)); }");
          { return (new Yytoken(2,yytext(),yyline,yychar,yychar+1));
          }
        case 43: break;
        case 2: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [84] { System.out.println(\"Illegal character: <\" + yytext() + \">\");"+zzNL+"\tUtility.error(Utility.E_UNMATCHED); }");
          { System.out.println("Illegal character: <" + yytext() + ">");
	Utility.error(Utility.E_UNMATCHED);
          }
        case 44: break;
        case 13: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [36] { return (new Yytoken(5,yytext(),yyline,yychar,yychar+1)); }");
          { return (new Yytoken(5,yytext(),yyline,yychar,yychar+1));
          }
        case 45: break;
        case 24: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [52] { return (new Yytoken(21,yytext(),yyline,yychar,yychar+1)); }");
          { return (new Yytoken(21,yytext(),yyline,yychar,yychar+1));
          }
        case 46: break;
        case 7: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [43] { return (new Yytoken(12,yytext(),yyline,yychar,yychar+1)); }");
          { return (new Yytoken(12,yytext(),yyline,yychar,yychar+1));
          }
        case 47: break;
        case 26: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [57] { yybegin(COMMENT); comment_count++; }");
          { yybegin(COMMENT); comment_count++;
          }
        case 48: break;
        case 32: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [77] { if (--comment_count == 0) yybegin(YYINITIAL); }");
          { if (--comment_count == 0) yybegin(YYINITIAL);
          }
        case 49: break;
        case 30: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [50] { return (new Yytoken(19,yytext(),yyline,yychar,yychar+2)); }");
          { return (new Yytoken(19,yytext(),yyline,yychar,yychar+2));
          }
        case 50: break;
        case 25: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [59] { String str =  yytext().substring(1,yylength()-1);"+zzNL+"    return (new Yytoken(40,str,yyline,yychar,yychar+yylength())); }");
          { String str =  yytext().substring(1,yylength()-1);
    return (new Yytoken(40,str,yyline,yychar,yychar+yylength()));
          }
        case 51: break;
        case 8: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [31] { return (new Yytoken(0,yytext(),yyline,yychar,yychar+1)); }");
          { return (new Yytoken(0,yytext(),yyline,yychar,yychar+1));
          }
        case 52: break;
        case 29: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [46] { return (new Yytoken(15,yytext(),yyline,yychar,yychar+2)); }");
          { return (new Yytoken(15,yytext(),yyline,yychar,yychar+2));
          }
        case 53: break;
        case 11: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [34] { return (new Yytoken(3,yytext(),yyline,yychar,yychar+1)); }");
          { return (new Yytoken(3,yytext(),yyline,yychar,yychar+1));
          }
        case 54: break;
        case 14: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [37] { return (new Yytoken(6,yytext(),yyline,yychar,yychar+1)); }");
          { return (new Yytoken(6,yytext(),yyline,yychar,yychar+1));
          }
        case 55: break;
        case 31: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [76] { comment_count++; }");
          { comment_count++;
          }
        case 56: break;
        case 18: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [41] { return (new Yytoken(10,yytext(),yyline,yychar,yychar+1)); }");
          { return (new Yytoken(10,yytext(),yyline,yychar,yychar+1));
          }
        case 57: break;
        case 6: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [44] { return (new Yytoken(13,yytext(),yyline,yychar,yychar+1)); }");
          { return (new Yytoken(13,yytext(),yyline,yychar,yychar+1));
          }
        case 58: break;
        case 27: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [53] { return (new Yytoken(22,yytext(),yyline,yychar,yychar+2)); }");
          { return (new Yytoken(22,yytext(),yyline,yychar,yychar+2));
          }
        case 59: break;
        case 21: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [47] { return (new Yytoken(16,yytext(),yyline,yychar,yychar+1)); }");
          { return (new Yytoken(16,yytext(),yyline,yychar,yychar+1));
          }
        case 60: break;
        case 4: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [70] { return (new Yytoken(42,yytext(),yyline,yychar,yychar+yylength())); }");
          { return (new Yytoken(42,yytext(),yyline,yychar,yychar+yylength()));
          }
        case 61: break;
        case 28: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [48] { return (new Yytoken(17,yytext(),yyline,yychar,yychar+2)); }");
          { return (new Yytoken(17,yytext(),yyline,yychar,yychar+2));
          }
        case 62: break;
        case 16: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [39] { return (new Yytoken(8,yytext(),yyline,yychar,yychar+1)); }");
          { return (new Yytoken(8,yytext(),yyline,yychar,yychar+1));
          }
        case 63: break;
        case 1: 
          System.out.println("line: "+(yyline+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [78] {  }");
          { 
          }
        case 64: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occurred.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Yylex <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Yylex scanner = null;
        try {
          scanner = new Yylex( new java.io.FileReader(argv[i]) );
          do {
            System.out.println(scanner.yylex());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
